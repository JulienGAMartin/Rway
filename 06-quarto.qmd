# Reproducible reports with Quarto {#sec-rmarkdown-r}

```{r}
#| include: false
#| message: false
library(knitr)
library(gt)
library(tidyverse)
suppressPackageStartupMessages(library(knitr))
```


::: {.callout-warning}
screenshot are still with R markdown will be update soon
:::

This chapter will introduce you to creating reproducible reports using R markdown / Quarto to encourage best (or better) practice to facilitate open science.
It will first describe what R markdown and Quarto are and why you might want to consider using it, describe how to create a Quarto document using RStudio and then how to convert this document to a html or pdf formatted report.
During this Chapter you will learn:

* the different components of a Quarto document
* how to format text, graphics and tables within the document
* how to avoid some of the common difficulties using Quarto.

## What is R markdown / Quarto?

### R Markdown

R markdown is a simple and easy to use plain text language used to combine your R code, results from your data analysis (including plots and tables) and written commentary into a single nicely formatted and reproducible document (like a report, publication, thesis chapter or a web page like this one).

Technically, R markdown is a combination of three languages, R, Markdown and YAML (yet another markup language).
Both Markdown and YAML are a type of 'markup' language.
A markup language simply provides a way of creating an easy to read plain text file which can incorporate formatted text, images, headers and links to other documents.
If you're interested you can find more information about markup languages [here][markup].
Actually, you are exposed to a markup language on a daily basis, as most of the internet content you digest every day is underpinned by a markup language called HTML (**H**yper**t**ext **M**arkup **L**anguage).
Anyway, the main point is that R markdown is very easy to learn (much, much easier than HTML) and when used with a good IDE (RStudio or VS Code) it's ridiculously easy to integrate into your workflow to produce feature rich content (so why wouldn't you?!).

### Quarto?

Quarto is a multi-language, next generation version of R Markdown from Posit, with many new features and capabilities and is compatible not only with R but also with other language like Python and Julia.
Like R Markdown, Quarto uses `knitr` :package: package to execute R code, and is therefore able to render most existing **.Rmd** files without modification.
However, it also comes with a plethora of new functionalities.
More importantly, it makes it much easier to create different type of output since the coding is homogenize for specific format without having to rely on different r packages each with there own specificity (*e.g* bookdown, hugodown, blogdown, thesisdown, rticles, xaringan, ...).

In the rest of this chapter, we will talk about Quarto but a lot can be done with R markdown.
Quarto uses `.qmd` files while R markdown works with `.Rmd` but Quarto can render `.Rmd` files too.

## Why use Quarto?

During the previous Chapters we talked a lot about conducting your research in a robust and reproducible manner to facilitate open science.
In a nutshell, open science is about doing all we can to make our data, methods, results and inferences transparent and available to everyone.
Some of the main tenets of open science are described [here][open-sci2] and include:

- Transparency in experimental methodology, observation, collection of data and analytical methods.
- Public availability and re-usability of scientific data
- Public accessibility and transparency of scientific communication
- Using web-based tools to facilitate scientific collaboration

By now all of you will (hopefully) be using R to explore and analyse your interesting data.
As such, you're already well along the road to making your analysis more reproducible, transparent and shareable.
However, perhaps your current workflow looks something like this:

```{r}
#| label: fig-workflow
#| fig-cap: Non-reproducible workflow
#| echo: false
#| fig-align: center
#| out-width: 90%
include_graphics("images/markdown/workflow1.png")
```

Your data is imported from your favourite spreadsheet software into R, you write your R code to explore and analyse your data, you save plots as external files, copy tables of analysis output and then manually combine all of this and your written prose into a single MS Word document (maybe for a paper or thesis chapter).
Whilst there is nothing particularly wrong with this approach (and it's certainly better than using point and click software to analyse your data) there are some limitations:

- It's not particularly reproducible.
Because this workflow separates your R code from the final document there are multiple opportunities for undocumented decisions to be made (which plots did you use? what analysis did/didn't you include? etc).

- It's inefficient.
If you need to go back and change something (create a new plot or update your analysis etc) you will need to create or amend multiple documents increasing the risk of mistakes creeping into your workflow.

- It's difficult to maintain.
If your analysis changes you again need to update multiple files and documents.

- It can be difficult to decide what to share with others.
Do you share all of your code (initial data exploration, model validation etc) or just the code specific to your final document? It's quite a common (and bad!) practice for researchers to maintain two R scripts, one used for the actual analysis and one to share with the final paper or thesis chapter.
This can be both time consuming and confusing and should be avoided.

Perhaps a more efficient and robust workflow would look something like this: 

```{r}
#| label: fig-workflow-rep
#| fig-cap: A-reproducible (and more fficient) workflow
#| echo: false
#| fig-align: center
#| out-width: 90%
include_graphics("images/markdown/workflow2.png")
```


Your data is imported into R as before but this time all of the R code you used to analyse your data, produce your plots and your written text (Introduction, Materials and Methods, Discussion etc) is contained within a single Quarto document which is then used (along with your data) to automatically create your final document.
This is exactly what Quarto allows you to do.

Some of the advantages of using Quarto include: 

- Explicitly links your data with your R code and output creating a fully reproducible workflow.
**ALL** of the R code used to explore, summarise and analyse your data can be included in a single easy to read document.
You can decide what to include in your final document (as you will learn below) but all of your R code can be included in the Quarto document.

- You can create a wide variety of output formats (pdf, html web pages, MS Word and many others) from a single Quarto document which enhances both collaboration and communication.

- Enhances transparency of your research.
Your data and Quarto file can be included with your publication or thesis chapter as supplementary material or hosted on a GitHub repository (see @sec-github-r).

- Increases the efficiency of your workflow.
If you need to modify or extend your current analysis you just need to update your Quarto document and these changes will automatically be included in your final document.

## Get started with Quarto

Quarto integrates really well with [R Studio](https://quarto.org/docs/tools/rstudio.html) and [VS Code](https://quarto.org/docs/tools/vscode.html), and provide both a source editor as well as a visual editor providing an experience close to your classic WYSIWYG (what you see is what you write) writing software (e.g. Microsoft Word or LibreOffice writer)

### Installation

To use Quarto you will first need to install the `Quarto` software and the `quarto` :package: package (with its dependencies).
You can find instructions on how to do this in @sec-install-r and on the [Quarto website](https://quarto.org/docs/get-started/).
If you would like to create pdf documents (or MS Word documents) from your Quarto file you will also need to install a version of {{< latex >}} on your computer.
If you've not installed {{< latex >}} before, we recommend that you install [TinyTeX][tinytex].
Again, instructions on how to do this can be found at @sec-install-r.

### Create a Quarto document, `.qmd` {#sec-new-rm}

Right, time to create your first Quarto document.
Within RStudio, click on the menu `File` -> `New File` -> `Quarto...`.
In the pop up window, give the document a 'Title' and enter the 'Author' information (your name) and select HTML as the default output.
We can change all of this later so donâ€™t worry about it for the moment.

 

```{r}
#| label: fig-new-rm2
#| fig-cap: Creating a Quarto document
#| echo: false
#| fig-align: center
#| out-width: 85%
include_graphics("images/markdown/new_rm2.png")
```

 

You will notice that when your new Quarto document is created it includes some example Quarto code.
Normally you would just highlight and delete everything in the document except the information at the top between the `---` delimiters (this is called the YAML header which we will discuss in a bit) and then start writing your own code.
However, just for now we will use this document to practice converting Quarto to both html and pdf formats and check everything is working.
   

 

```{r}
#| label: fig-new-file-rm
#| fig-cap: A new Quarto document
#| echo: false
#| fig-align: center
#| out-width: 85%
include_graphics("images/markdown/new_file_rm.png")
```

Once you've created your Quarto document it's good practice to save this file somewhere convenient (@sec-dir-struc and @fig-dir-struc).
You can do this by selecting `File` -> `Save` from RStudio menu (or use the keyboard shortcut ctrl + s on Windows or cmd + s on a Mac) and enter an appropriate file name (maybe call it `my_first_quarto`).
Notice the file extension of your new Quarto file is `.qmd`.
 

Now, to convert your `.qmd` file to a HTML document click on the little black triangle next to the `Knit` icon at the top of the source window and select `knit to HTML`  

 

```{r}
#| label: fig-knit-qmd
#| fig-cap: Knitting a Qmd file
#| echo: false
#| fig-align: center
#| out-width: 85%
include_graphics("images/markdown/knit_rm.png")
```

 

RStudio will now 'knit' (or render) your `.qmd` file into a HTML file.
Notice that there is a new `Quarto` tab in your console window which provides you with information on the rendering process and will also display any errors if something goes wrong.

If everything went smoothly a new HTML file will have been created and saved in the same directory as your `.qmd` file (ours will be called `my_first_quarto.html`).
To view this document simply double click on the file to open in a browser (like Chrome or Firefox) to display the rendered content.
RStudio will also display a preview of the rendered file in a new window for you to check out (your window might look slightly different if you're using a Windows computer).

 

```{r}
#| label: fig-html-out
#| fig-cap: A my first rendered html
#| echo: false
#| fig-align: center
#| out-width: 85%
include_graphics("images/markdown/html_rendered.png")
```

 

Great, you've just rendered your first Quarto document.
If you want to knit your `.qmd` file to a pdf document then all you need to do is choose `knit to PDF` instead of `knit to HTML` when you click on the `knit` icon.
This will create a file called `my_first_quarto.pdf` which you can double click to open.
Give it a go!

You can also knit an `.qmd` file using the command line in the console rather than by clicking on the knit icon.
To do this, just use the `quarto_render()` function from the  `quarto` :package: package as shown below.
Again, you can change the output format using the `output_format =` argument as well as many other options.

 

```r
library(quarto)

quarto_render('my_first_quarto.qmd', output_format = 'html_document')

# alternatively if you don't want to load the quarto package

quarto::quarto_render('my_first_quarto.Rmd', output_format = 'html_document')
```

## Quarto document (.qmd) anatomy

OK, now that you can render a Quarto file in RStudio into both HTML and pdf formats let's take a closer look at the different components of a typical Quarto document.
Normally each Quarto document is composed of 3 main components:

1. a YAML header
2. formatted text
3. code chunks.
 

```{r}
#| label: fig-qmd-struc
#| fig-cap: Structure of a qmd file
#| echo: false
#| fig-align: left
#| out-width: 85%
include_graphics("images/markdown/rm_components.png")
```

 

### YAML header

YAML stands for '**Y**AML **A**inâ€™t **M**arkup **L**anguage' (it's an 'in' [joke][joke]!) and this optional component contains the metadata and options for the entire document such as the author name, date, output format, etc.
The YAML header is surrounded before and after by a `---` on its own line.
In RStudio a minimal YAML header is automatically created for you when you create a new Quarto document as we did above (@sec-new-rm) but you can change this any time.
A simple YAML header may look something like this:

```yaml
---
title: My first Quarto document
author: Jane Doe
date: March 01, 2020
format: html
---
```

In the YAML header above the output format is set to HTML.
If you would like to change the output to pdf format then you can change it from `format: html` to  `format: pdf` (you can also set more than one output format if you like).
You can also change the default font and font size for the whole document and even include fancy options such as a table of contents and inline references and a bibliography.
If you want to explore the plethora of other options see [here][quarto-guide].
Just a note of caution, many of the options you can specify in the YAML header will work with both HTML and pdf formatted documents, but not all.
If you need multiple output formats for your Quarto document check whether your YAML options are compatible between these formats.
Also, indentation in the YAML header has a meaning, so be careful when aligning text.
For example, if you want to include a table of contents you would modify the `output:` field in the YAML header as follows

```yaml
---
title: My first Quarto document
author: Bob Hette
date: March 01, 2020
format:
  html:
    toc: true
---
```

### Formatted text

As mentioned above, one of the great things about Quarto is that you don't need to rely on your word processor to bring your R code, analysis and writing together.
Quarto is able to render (almost) all of the text formatting that you are likely to need such as italics, bold, strike-through, super and subscript as well as bulleted and numbered lists, headers and footers, images, links to other documents or web pages and also equations.
However, in contrast to your familiar *What-You-See-Is-What-You-Get* ([WYSIWYG][WYSIWYG]) word processing software you don't see the final formatted text in your Quarto document (as you would in MS Word), rather you need to 'markup' the formatting in your text ready to be rendered in your output document.
At first, this might seem like a right pain in the proverbial but it's actually very easy to do and also has many [advantages][markup-adv] (do you find yourself spending more time on making your text look pretty in MS Word rather than writing good content?!).
 

Here is an example of marking up text formatting in an Quarto document 

```md
#### Tadpole sediment experiment

These data were obtained from a mesocosm experiment which aimed to examine the
effect of bullfrog tadpoles (*Lithobates catesbeianus*) biomass on sediment
nutrient (NH~4~, NO~3~ and PO~3~) release.
At the start of the experiment 15 replicate mesocosms were filled with
20 cm^2^ of **homogenised** marine sediment and assigned to one of five 
tadpole biomass treatments.
```

which would look like this in the final rendered document (can you spot the markups?)

>#### Tadpole sediment experiment {.unlisted .unnumbered}

> These data were obtained from a mesocosm experiment which aimed to examine the
effect of bullfrog tadpoles (*Lithobates catesbeianus*) biomass on sediment
nutrient (NH~4~, NO~3~ and PO~3~) release.
At the start of the experiment 15 replicate mesocosms were filled with
20 cm^2^ of **homogenised** marine sediment and assigned to one of five 
tadpole biomass treatments.

#### Emphasis {-}

Some of the most common markdown syntax for providing emphasis and formatting text is given below.

 

|     Goal       |    Quarto       |     output        |
|:--------------:|:-------------------:|:-----------------:|
|  bold text     |   `**mytext**`   |   **mytext**   |
|  italic text   |   `*mytext*`   |   *mytext*   |
|  strikethrough | `~~mytext~~` | ~~mytext~~ |
|  superscript   |   `mytext^2^`  |   mytext^2^  |
|  subscript     |   `mytext~2~`    |   mytext~2~    |

 

Interestingly there is no underline in R markdown syntax by default, for more or less esoteric reasons (*e.g.* an underline is considered a stylistic element (there may well be other [reasons][underline])).
Quarto fixed that problem, you can simply do `[text to underline]{.underline}` to [underline your text]{.underline}.

#### White space and line breaks {-}

One of the things that can be confusing for new users of markdown is the use of spaces and carriage returns (the enter key on your keyboard).
In markdown, multiple spaces within the text are generally ignored as are carriage returns.
For example this markdown text

```md
These      data were      obtained from a
mesocosm experiment which    aimed to examine the
effect
of          bullfrog tadpoles (*Lithobates catesbeianus*) biomass.
```

will be rendered as 

>These      data were      obtained from a
>mesocosm experiment which    aimed to examine the
>effect
>of         bullfrog tadpoles (*Lithobates catesbeianus*) biomass.


This is generally a good thing (no more random multiple spaces in your text).
If you want your text to start on a new line then you can simply add two blank spaces at the end of the preceding line 


>These      data were      obtained from a  
>mesocosm experiment which    aimed to examine the    
>effect          bullfrog tadpoles (*Lithobates catesbeianus*) biomass.
    


If you really want multiple spaces within your text then you can use the **N**on **b**reaking **sp**ace tag `&nbsp;`

```md
These &nbsp; &nbsp; &nbsp; data were &nbsp; &nbsp; &nbsp; &nbsp; obtained from a  
mesocosm experiment which &nbsp; &nbsp; aimed to examine the    
effect &nbsp; &nbsp; &nbsp; &nbsp; bullfrog tadpoles (*Lithobates catesbeianus*) biomass.
```
 

>These &nbsp; &nbsp; &nbsp; data were &nbsp; &nbsp; &nbsp; &nbsp; obtained from a  
>mesocosm experiment which &nbsp; &nbsp; aimed to examine the    
>effect &nbsp; &nbsp; &nbsp; &nbsp; bullfrog tadpoles (*Lithobates catesbeianus*) biomass.

#### Headings {-}

You can add headings and subheadings to your Quarto document by using the `#` symbol at the beginning of the line.
You can decrease the size of the headings by simply adding more `#` symbols.
For example 

```md
# Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6
```

results in headings in decreasing size order

># Header 1 {.unlisted .unnumbered}
>## Header 2 {.unlisted .unnumbered}
>### Header 3 {.unlisted .unnumbered}
>#### Header 4 {.unlisted .unnumbered}
>##### Header 5 {.unlisted .unnumbered}
>###### Header 6 {.unlisted .unnumbered}

#### Comments {-}

As you can see above the meaning of the `#` symbol is different when formatting text in an Quarto document compared to a standard R script (which is used to included a comment - remember?!).
You can, however, use a `#` symbol to comment code inside a code chunk (@sec-code-chunks) as usual (more about this in a bit).
If you want to include a comment in your Quarto document outside a code chunk which won't be included in the final rendered document then enclose your comment between `<!--` and `-->`.

```md
<!--
this is an example of how to format a comment using Quarto.
-->
```

#### Lists {-}

If you want to create a bullet point list of text you can format an unordered list with sub items.
Notice that the sub-items need to be indented.
 

```md
- item 1
- item 2
   + sub-item 2
   + sub-item 3
- item 3
- item 4
```

 

>- item 1
>- item 2
>   + sub-item 2
>   + sub-item 3
>- item 3
>- item 4

 

If you need an ordered list 

```md
1. item 1
1. item 2
    + sub-item 2
    + sub-item 3
1. item 3
1. item 4
```

 

>1. item 1
>1. item 2
>    + sub-item 2
>    + sub-item 3
>1. item 3
>1. item 4

#### Links {-}

In addition to images you can also include links to webpages or other links in your document.
Use the following syntax to create a clickable link to an existing webpage.
The link text goes between the square brackets and the URL for the webpage between the round brackets immediately after.
 

```markdown
You can include a text for your clickable [link](https://www.worldwildlife.org)
```

which gives you: 

>You can include a text for your clickable [link](https://www.worldwildlife.org)

### Code chunks {#sec-code-chunks}

Now to the heart of the matter.
To include R code into your Quarto document you simply place your code into a 'code chunk'.
All code chunks start and end with three backticks ```` ``` ````.
Note, these are also known as 'grave accents' or 'back quotes' and are not the same as an apostrophe! On most keyboards you can [find the backtick][backtick] on the same key as tilde (~).

```{{r}}
Any valid R code goes here
```


You can insert a code chunk by either typing the chunk delimiters ```` ```{r} ```` and ```` ``` ```` manually or use your IDE option (RStudio toolbar (the Insert button) or by clicking on the menu `Code` -> `Insert Chunk`.
In VS Code you can use code snippets) Perhaps an even better way is to get familiar with the keyboard shortcuts for you IDE or code snippets.

There are a many things you can do with code chunks: you can produce text output from your analysis, create tables and figures and insert images amongst other things.
Within the code chunk you can place rules and arguments between the curly brackets `{}` that give you control over how your code is interpreted and output is rendered.
These are known as chunk options.
The only mandatory chunk option is the first argument which specifies which language you're using (`r` in our case but [other][engines] languages are supported).
Note, chunk options can be written in two ways:

1.
either all of your chunk options must be written between the curly brackets on one line with no line breaks 
1.
or they can be written using a YAML notation within the code chunk using `#|` notation at the beginning of the line.

We are using the YAML notation for code chunk options since we find it much easier to read when you have multiple options of long captions.

You can also specify an optional code chunk name (or label)  which can be useful when trying to debug problems and when performing advanced document rendering.
In the following block, we name the code chunk `summary-stats`, load the package `ggplot2` `r emoji::emoji("package")`, create a dataframe (`dataf`) with two variables `x` and `y`, use the `summary()` function to display some summary statistics and plot a scatterplot of the data with `ggplot()`.
When we run the code chunk both the R code and the resulting output are displayed in the final document.

````md
`r ''````{r, summary-stats, echo = TRUE, fig.cap = "Caption for a simple figure but making the chunk options long and hard to read"}
library(ggplot)
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

summary(dataf)
ggplot(dataf, aes(x = x, y = y)) + geom_point()
```
````

```{{r}}
#| label: summary-stats
#| echo: true
#| fig-cap = "Caption for a simple figure but making the chunk options long and hard to read"

x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

summary(dataf)
ggplot(dataf, aes(x = x, y = y)) + geom_point()
```

Both will output

```{r}
#| label: fig-summary-stats
#| echo: true
#| fig-cap: "Caption for a simple figure but making the chunk options long and hard to read"
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

summary(dataf)
ggplot(dataf, aes(x = x, y = y)) + geom_point()
```

When using chunk names make sure that you don't have duplicate chunk names in your Quarto document and avoid spaces and full stops as this will cause problems when you come to knit your document (We use a `-` to separate words in our chunk names).

If we wanted to only display the output of our R code (just the summary statistics for example) and not the code itself in our final document we can use the chunk option `echo=FALSE`


```{{r}}
#| label: summary-stats2
#| echo: false
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

```{r}
#| label: summary-stats2
#| echo: false
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

To display the R code but not the output use the `results='hide'` chunk option.

```{{r}}
#| label: summary-stats
#| results: 'hide'
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

```{r}
#| label: summary-stats3
#| results: hide
#| class-source: fold-show
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

Sometimes you may want to execute a code chunk without showing any output at all.
You can suppress the entire output using the chunk option `include: false`.

```{{r}}
#| label: summary-stats4
#| include: false
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

```{r}
#| label: summary-stats4
#| include: false
#| class-source: fold-show
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
summary(dataf)
```

There are a large number of chunk options documented [here][chunk-opt] with a more condensed version [here][rmd-ref].
Perhaps the most commonly used are summarised below with the default values shown.
 

|     Chunk option       |    default value       |     Function        |
|:-----------------|:-----------------------|:--------------------|
|  echo     |   `echo: true`   |   If `false`, will not display the code in the final document   |
|  results   |   `results: 'markup'`   |   If 'hide', will not display the codeâ€™s results in the final document.
If 'hold', will delay displaying all output pieces until the end of the chunk.
If 'asis', will pass through results without reformatting them.
  |
|  include | `include: true` | If `false`, will run the chunk but not include the chunk in the final document.
|
|  eval   |   `eval: true`  |   If `false`, will not run the code in the code chunk.
 |
|  message     |   `message: true`    |   If `false`, will not display any messages generated by the code.
   |
|  warning     |   `warning: true`    |   If `false`, will not display any warning messages generated by the code.
   |

### Inline R code

Up till now we've been writing and executing our R code in code chunks.
Another great reason to use Quarto is that we can also include our R code directly within our text.
This is known as 'inline code'.
To include your code in your Quarto text you simply write `` `r knitr::inline_expr("write your code here")` ``.
This can come in really useful when you want to include summary statistics within your text.
For example, we could describe the `iris` dataset as follows:  

```
Morphological characteristics (variable names: 
`r knitr::inline_expr("names(iris)[1:4]")`) were measured from 
`r knitr::inline_expr("nrow(iris)")` *Iris sp.* plants from 
`r knitr::inline_expr("length(levels(iris$Species))")` different species.
The mean Sepal length was
`r knitr::inline_expr("round(mean(iris$Sepal.Length), digits = 2)")` mm.
  
```

which will be rendered as  

>Morphological characteristics (variable names: `r names(iris)[1:4]`) were
>measured from `r nrow(iris)` *iris* plants from `r length(levels(iris$Species))`
>different species.
The mean Sepal length was 
>`r round(mean(iris$Sepal.Length), digits = 2)` mm.

The great thing about including inline R code in your text is that these values will automatically be updated if your data changes.


### Images and photos

A useful feature is the ability to embed images and links to web pages (or other documents) into your Quarto document.
You can include images into your Quarto document in a number of different ways.
Perhaps the simplest method is to use the Quarto markdown format:

```md
![Image caption](path/to/you/image){options}
```

Here is an example with an image taking 75% of the width and centered.

```md
![Waiting for the eclipse](images/markdown/eclipse_ready.jpg){fig-align="center" width="75%"}
```

resulting in:

![Waiting for the eclipse](images/markdown/eclipse_ready.jpg){fig-align="center" width="75%" #fig-waiting}

An alternative way of including images in your document is to use the `include_graphics()` function from the `knitr` package. The following code will produce similar output. 

```{{r}}
#| label: fig-knitr
#| fig-align: center
#| out-width: 75%
#| fig-cap: Waiting for the eclipse
knitr::include_graphics("images/markdown/eclipse_ready.jpg")
```

The code above will only work if the image file (`eclipse_ready.jpg`) is in the right place relative to where you saved your `.qmd` file.
In the example the image file is in a sub directory (folder) called `images/markdown` in the directory where we saved our `my_first_quarto.qmd` file.
You can embed images saved in many different file types but perhaps the most common are `.jpg` and `.png`.

### Figures

By default, figures produced by R code will be placed immediately after the code chunk they were generated from.
For example:

```{r}
#| label: fig-simple-plot
#| fig-cap: A simple plot
#| echo: fenced
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```

The `fig-cap: ` chunk option allow to provide a figure caption recognized by Quarto and using in figure numbering and cross referencing (@sec-crossrefs).

If you want to change the plot dimensions in the final document you can use the `fig-width:` and `fig-height:` chunk options (in inches!).
You can also change the alignment of the figure using the `fig-align:` chunk option.

```{r}
#| label: fig-simple-plot2
#| fig-cap: A shrinked figure
#| fig-width: 4
#| fig-height: 3
#| fig-align: center
#| echo: fenced
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```



You can add a figure caption using the `fig-cap: ` option.

```{r}
#| label: fig-simple-plot-cap
#| class-source: fold-show
#| fig-cap: A simple plot
#| fig-align: center
#| echo: fenced
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```

 

If you want to suppress the figure in the final document use the `fig-show: 'hide'` option.


```{r}
#| label: fig-simple-plot5
#| fig-show: hide
#| echo: fenced
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)
plot(dataf$x, dataf$y, xlab = "x axis", ylab = "y axis")
```

 

If you're using a package like `ggplot2` :package: to create your plots then don't forget you will need to make the package available with the `library()` function in the code chunk (or in a preceding code chunk).


```{r}
#| label: fig-simple-ggplot
#| fig-cap: A simple ggplot
#| echo: fenced
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

library(ggplot2)
ggplot(dataf, aes(x = x, y = y)) +
  geom_point()
```

 

Again, there are a large number of chunk options specific to producing plots and figures.
See [here][rmd-ref] for more details.

### Tables

In Quarto, you can create tables using native markdown syntax (this doesn't need to be in a code chunk).

 
```md
|  x  |  y  |
|:---:|:---:|
|  1  |  5  | 
|  2  |  4  |
|  3  |  3  |
|  4  |  2  |
|  5  |  1  |

: Caption for a simple markdown table
```

|  x  |  y  |
|:---:|:---:|
|  1  |  5  | 
|  2  |  4  |
|  3  |  3  |
|  4  |  2  |
|  5  |  1  |

: Caption for a simple markdown table {#tbl-simp-md}

The `:-------:` lets markdown know that the line above should be treated as a header and the lines below as the body of the table.
Alignment within the table is set by the position of the `:`.
To center align use `:------:`, to left align `:------` and right align `------:`.
Whilst it can be fun(!) to create tables with raw markup it's only  practical for very small and simple tables.
 

The easiest way we know to include tables in an Quarto document is by using the `kable()` function from the `knitr` :package: package.
The `kable()` function can create tables for HTML, PDF and Word outputs.

To create a table of the first 2 rows per species of the `iris` data frame using the `kable()` function simply write

```r
library(knitr)
iris %>%
  group_by(Species) %>%
  slice_head(n = 2) %>%
kable()
```

or without loading `knitr` :package: but indicating where to find the `kable()` function.

```r
iris %>%
  group_by(Species) %>%
  slice_head(n = 2) %>%
  knitr::kable()
```

```{r}
#| label: tbl-kable-table
#| tbl-cap: A simple kable table
#| echo: false
#| warning: false
iris %>%
  group_by(Species) %>%
  slice_head(n = 2) %>%
  knitr::kable(booktabs = TRUE)
```

The `kable()` function offers plenty of options to change the formatting of the table.
For example, if we want to round numeric values to one decimal place use the `digits =` argument.
To center justify the table contents use `align = 'c'` and to provide custom column headings use the `col.names =` argument.
See `?knitr::kable` for more information.

```r
iris %>%
  group_by(Species) %>%
  slice_head(n = 2) %>%
  knitr::kable(
    digits=0,
    align = 'c',
    col.names = c(
      'Sepal length', 'Sepal width',
      'Petal length', 'Petal width', 'Species'
    )
)
```

```{r}
#| label: tbl-kable-table2-latex
#| tbl-cap: A nicer kable table
#| echo: false
#| warning: false
iris %>%
  group_by(Species) %>%
  slice_head(n = 2) %>%
  knitr::kable(
    booktabs = TRUE,
    digits = 0,
    align = "c",
    col.names = c(
      "Sepal length", "Sepal width",
      "Petal length", "Petal width", "Species"
    )
  )
```

You can further enhance the look of your `kable` tables using the `kableExtra` :package: package (don't forget to install the package first!).
See [here][kableExtra] for more details and a helpful tutorial.

If you want even more control and customisation options for your tables take a look at the `gt` `r emoji::emoji("package")` [package][gt].
`gt` is an acronym for **g**rammar of **t**ables and is based on similar principle for tables that are used for plots in ggplot.

```{r}
#| label: tbl-gt-table
#| tbl-cap: A nice gt table
#| echo: true
iris %>%
  group_by(Species) %>%
  slice_head(n = 2) %>%
  rename_with(~ gsub("([._])", " ", .x)) %>%
  gt()
```

Within most R packages developped to produce tables, there are options to include table captions. 
However, if you want to add a table caption we recommend to do using the code chunk option in Quarto `tbl-cap:` since it will allow for cross-referencing (@sec-crossrefs) and better integration in the document.

```{{r}}
#| label: tbl-gt-table
#| tbl-cap: A nice gt table
#| echo: true
iris %>%
  group_by(Species) %>%
  slice_head(n=2) %>%
  rename_with(~gsub("([._])", " ", .x)) %>%
  gt()
```

### Cross-referencing {#sec-crossrefs}

Cross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures and tables. Once set up, tables and figures numbering happens automatically, so you donâ€™t need to re-number all the figures when you add or delete one.

Every cross-referenceable entity requires a label (a unique identifier) prefixed with a cross-reference type e.g. #fig-element

For more details see the [cross-referencing section on Quarto website](https://quarto.org/docs/authoring/cross-references.html).

#### Document sections

You can make cross-references to other sections of the document. To do so you need to:

1. set up a identifier for the section you want to link to. The identifier should:
    - start with **#sec-**
    - be in lower case (Figure 6.3)
    - doe not have any space, using `-` instead
2. use the `@` symbol and the identifier to refer to the section

```md
## Cross-referencing sections {#sec-cross-ref-sections}

[...]

As seen before(@sec-cross-ref-sections)
```

#### Images, figures and tables

For tables, images and figures, in addition to the identifier the element also needs a caption for cross-referencing to work.

The prefix for tables is `#tbl-` and `#fig-` for images and figures.

Here is an example for an image included with markdown:

```md
![Rocking the eclipse](images/markdown/eclipse_ready.jpg){#fig-cute-dog}

See @fig-cute-dog for an illustration.
```

![Rocking the eclipse](images/markdown/eclipse_ready.jpg){#fig-cute-dog}

See @fig-cute-dog for an illustration.

For figures and tables produced with R code chunks, simply provide the identifier in the `label` chunk option and the caption also as a chunk option.

Here is the code for a figure and a table.

```{r}
#| label: fig-cr-plot
#| fig-cap: A nice figure
#| echo: fenced
x <- 1:10    # create an x variable
y <- 10:1    # create a y variable
dataf <- data.frame(x = x, y = y)

library(ggplot2)
ggplot(dataf, aes(x = x, y = y)) +
  geom_point()
```


```{r}
#| label: tbl-cr-table
#| tbl-cap: A nice table
#| echo: fenced
#| warning: false
library(knitr)
kable(iris[1:5,], digits=0, align = 'c', col.names = c('sepal length', 'sepal width', 'petal length', 'petal width', 'species'))
```

Using cross-references, we can write:

As seen on `@fig-cr-plot` and `@tbl-cr-table` ...

To get:

As seen on @fig-cr-plot and @tbl-cr-table ...


### Citations and bibliography

To generate citations and a bibliography, Quarto requires:

- a properly formatted `.qmd` document
- a bibliographic source file including all the information for the citations. It works with awide variatey of format but we suggest using {{< bibtex >}} format.
- (optional) a CSL file which specifies the formatting to use when generating the citations and bibliography.

The bibliographic source and the (optional) csl file are specified in the yaml header as :

```yaml
---
title: "My Document"
bibliography: references.bib
csl: ecology.csl
---
```

#### Citations

Quarto uses the standard Pandoc markdown representation for citations (e.g. `[@citation]`) â€” citations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of â€˜@â€™ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or _, and may contain alphanumerics, _, and internal punctuation characters. 

| Markdown Format | Output (default) |
|-----------------|------------------|
| Unicorns are the best [see `@martin1219`, pp. 33-35; also `@martin2200`, chap. 1] | Unicorns are the best [see @martin1219, pp. 33-35; also @martin2200, chap. 1]
| Unicorns are the best [`@martin2200`; `@martin1219`] | Unicorns are the best [@martin2200; @martin1219] |
| Martin says unicorns are the best [`-@martin2200`] | Martin says unicorns are the best [-@martin2200] |
| `@martin1219` says unicorns are the best. | @martin1219 says unicorns are the best. |
| `@martin1219` [p. 33] says unicorns are the best. | @martin1219 [p. 33] says unicorns are the best. |


#### Create the bibliography

By default, the list of works cited will automatically be generated and placed at the end of document if the style calls for it. It will be placed in a div with the id refs if one exists like

```md
### Bibliography

::: {#refs}
:::
```

For more details see the [Citation page on Quarto website](https://quarto.org/docs/authoring/footnotes-and-citations.html).

#### Integration with Zotero

Quarto integrates really well with [Zotero](zotero) if you are using the visual editor in either [RStudio](https://quarto.org/docs/visual-editor/technical.html#citations) or [VS Code](https://quarto.org/docs/visual-editor/vscode/).

## Some tips and tricks {#sec-tips-tricks}

**Problem :** 

When rendering my Quarto document to pdf my code runs off the edge of the page.

**Solution:**

Add a global_options argument at the start of your `.qmd` file in a code chunk:

```{{r}}
#| label: global_options
#| include: false 
knitr::opts_chunk$set(message=FALSE, tidy.opts=list(width.cutoff=60), tidy=TRUE) 
```


This code chunk wonâ€™t be displayed in the final document due to the `include: false` argument and you should place the code chunk immediately after the YAML header to affect everything below that.

`tidy.opts = list(width.cutoff = 60), tidy=TRUE` defines the margin cutoff point and wraps text to the next line.
Play around with this value to get it right (60-80 should be OK for most documents).

With quarto you can also put the global `knitr` options in a `knitr`block in the YAML header (see [Quarto website](https://quarto.org/docs/computations/r.html#knitr-options) for details).


```yaml
---
title: "My Document"
format: html
knitr:
  opts_chunk: 
    message: false
    tidy.opts: !expr 'list(width.cutoff=60)'
    tidy: true 
---
```

**Problem:** 

When I load a package in my Quarto document my rendered output contains all of the startup messages and/or warnings.

**Solution:**

You can load all of your packages at the start of your Quarto document in a code chunk along with setting your global options.

```{{r}}
#| label: global_options
#| include: false
knitr::opts_chunk$set(
  message = FALSE,
  warning=FALSE,
  tidy.opts=list(width.cutoff=60)
) 
suppressPackageStartupMessages(library(ggplot2))
```

The `message = FALSE` and `warning = FALSE` arguments suppress messages and warnings.
The `suppressPackageStartupMessages(library(ggplot2))` will load the `ggplot2` :package: package but suppress startup messages.

 

**Problem:**

When rendering my Quarto document to pdf my tables and/or figures are split over two pages.

**Solution:**

Add a page break using the {{< latex >}} `\pagebreak` notation before your offending table or figure

 

**Problem:**

The code in my rendered document looks ugly!

**Solution:**

Add the argument `tidy: true` to your global arguments.
Sometimes, however, this can cause problems especially with correct code indentation.
The best solution is to write code that looks nice (insert space and use multiple lines)

## Further Information

Although we've covered more than enough to get you quite far using Quarto, as with most things R related, we've really only had time to scratch the surface.
Happily, there's a wealth of information available to you should you need to expand your knowledge and experience.
A good place to start is the excellent quarto website [here](https://quarto.org/).

Another useful and concise Quarto reference guide can be found [here][rmd-ref]

A quick and easy R Markdown [cheatsheet][rmd-cheat]

```{r}
#| label: links
#| child: images/_links.md
```
  

## Practical

We will create a new Rmarkdown document and edit it using basic `R` and `Rmarkdown` functions.

### Context

We will use the awesome `palmerpenguins` dataset `r emoji::emoji("penguin")` to explore and visualize data.

These data have been collected and shared by [Dr. Kristen Gorman](https://www.uaf.edu/cfos/people/faculty/detail/kristen-gorman.php) and [Palmer Station, Antarctica LTER](https://pal.lternet.edu/).

The package was built by Drs Allison Horst and Alison Hill, check out the [official website](https://allisonhorst.github.io/palmerpenguins/).

The package `palmerpenguins` has two datasets: 

- `penguins_raw` has the raw data of penguins observations (see `?penguins_raw` for more info)
- `penguins` is a simplified version of the raw data (see `?penguins` for more info)

For this exercise, we're gonna use the `penguins` dataset.

```{r}
#| label: showdata-md
library(palmerpenguins)
head(penguins)
```


### Questions

**1)** Install the package `palmerpenguins`.

::: {.callout-tip collapse='true'}

# Solution
```{r}
#| eval: false
install.packages("palmerpenguins")
```

:::

**2)** 

- Create a new Quarto document, name it and save it.
- Delete everything after line 12.
- Add a new section title, simple text and text in bold font.
- Compile ("Knit").

**3)**

- Add a chunk in which you load the `palmerpenguins`. The corresponding line of code should be hidden in the output.
- Load also the `tidyverse` suite of packages. Modify the defaults to suppress all messages.

::: {.callout-tip collapse='true'}

### Solution
```{{r}}
#| echo: false
#| message:false
library(palmerpenguins)
library(tidyverse)
```
:::

**4)** Add another chunk in which you build a table with the 10 first rows of the dataset.

::: {.callout-tip collapse='true'}

# Solution
```{{r}}
penguins %>%
  slice(1:10) %>%
  knitr::kable()
```
:::

**5)** In a new section, display how many individuals, penguins species and islands we have in the dataset. This info should appear directly in the text, you need to use inline code `r emoji::emoji("smile")`. Calculate the mean of the (numeric) traits measured on the penguins.

::: {.callout-tip collapse='true'}

### Solution

````markdown
## Numerical exploration

There are `r '\x60r nrow(penguins)\x60'` penguins in the dataset,
and `r '\x60r length(unique(penguins$species))\x60'` different species.
The data were collected in `r '\x60r length(unique(penguins$island))\x60'`
islands of the Palmer archipelago in Antarctica.

The mean of all traits that were measured on the penguins are:
````

```{{r}}
#| echo: false
penguins %>%
  group_by(species) %>%
  summarize(across(where(is.numeric), mean, na.rm = TRUE))
```
:::

**6)** In another section, entitled 'Graphical exploration', build a figure with 3 superimposed histograms, each one corresponding to the body mass of a species.

::: {.callout-tip collapse='true'}

### Solution

````markdown
## Graphical exploration

A histogram of body mass per species:
````

```{{r}}
#| fig-cap: Distribution of body mass by species of penguins
  ggplot(data = penguins) +
  aes(x = body_mass_g) +
  geom_histogram(aes(fill = species),
                 alpha = 0.5,
                 position = "identity") +
  scale_fill_manual(values = c("darkorange","purple","cyan4")) +
  theme_minimal() +
  labs(x = "Body mass (g)",
       y = "Frequency",
       title = "Penguin body mass")
```
:::


**7)** In another section, entitled *Linear regression*, fit a model of bill length as a function of body size (flipper length), body mass and sex. Obtain the output and graphically evaluate the assumptions of the model. As reminder here is how you fit a linear regression.

```{{r}}
model <- lm(Y ~  X1 + X2, data = data)
summary(model)
plot(model)
```

::: {.callout-tip collapse='true'}

### Solution

````markdown
## Linear regression

And here is a nice model with graphical output
````

```{{r}}
#| fig-cap: "Checking assumptions of the model"
m1 <- lm(bill_length_mm ~  flipper_length_mm + body_mass_g + sex, data = penguins)
summary(m1)
par(mfrow= c(2,2))
plot(m1)
```

:::

**8)** Add references manually or using `citr` in `RStudio`.

  1. Pick a recent publication from the researcher who shared the data, Dr Kristen Gorman. Import this publication in your favorite references manager (we use Zotero, no hard feeling), and create a bibtex reference that you will add to to the file `mabiblio.bib`.
  2. Add `bibliography: mabiblio.bib` at the beginning of your R Markdown document (YAML).
  3. Cite the reference iin the text using either typing the reference manually or using `citr`. To use `citr`, instal  it first; if everything goes well, you should see it in the pulldown menu `Addins` `r emoji::emoji("muscle")`. Then simply use `Insert citations` in the pull-down menu `Addins`.
  4. Compile.

**9)** Change the default citation format (Chicago style) into the The American Naturalist format. It can be found here  <https://www.zotero.org/styles>. To do soo, add `csl: the-american-naturalist.csl` in the YAML.

**10)** Build your report in html, pdf and docx format. `r emoji::emoji("tada")`

### Example of output {-}

You can see an example of the [Rmarkdown source file](data/examples/rmarkdown_practical.Rmd) and [pdf output](data/examples/rmarkdown_practical.pdf) 

```{r}
#| echo: false
#| out-width: 50%
#| fig-align: center
#| fig-cap: Happy coding
knitr::include_graphics("images/lter_penguins.png")
```
